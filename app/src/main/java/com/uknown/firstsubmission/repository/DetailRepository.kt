package com.uknown.firstsubmission.repositoryimport android.util.Logimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MediatorLiveDataimport com.uknown.firstsubmission.network.response.ItemsItemimport com.uknown.firstsubmission.network.response.UserDetailResponseimport com.uknown.firstsubmission.network.retorfit.Serviceimport com.uknown.firstsubmission.utils.Resourcesimport retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseimport retrofit2.awaitResponseclass DetailRepository(    private val service: Service,) {    private val profile = MediatorLiveData<Resources<UserDetailResponse?>>()    private val follow = MediatorLiveData<Resources<List<ItemsItem>?>>()    private val followers = MediatorLiveData<Resources<List<ItemsItem>?>>()    companion object {        private const val DETAIL = "Detail View Model"        private var instance: DetailRepository? = null        fun getInstance(service: Service) =            instance ?: synchronized(this) {                instance = DetailRepository(service)                instance            }    }    suspend fun getDetailUser(username: String): LiveData<Resources<UserDetailResponse?>> {        profile.value = Resources.Loading        val call = service.getDetailUser(username).awaitResponse()        if (call.isSuccessful) {            if (call.body() != null) {                profile.value = Resources.Success(call.body())            }        }        return profile    }    fun getFollowers(username: String): LiveData<Resources<List<ItemsItem>?>> {        followers.value = Resources.Loading        val call = service.getFollowers(username)        call.enqueue(object : Callback<List<ItemsItem>> {            override fun onResponse(                call: Call<List<ItemsItem>>,                response: Response<List<ItemsItem>>            ) {                if (response.isSuccessful) {                    response.body().let {                        followers.value = Resources.Success(it)                    }                } else {                    Log.w(DETAIL, "Gagal mengambil data")                }            }            override fun onFailure(call: Call<List<ItemsItem>>, t: Throwable) {                Log.e(DETAIL, "Somthing went wrong")            }        })        return followers    }    fun getFollowing(username: String): LiveData<Resources<List<ItemsItem>?>> {        follow.value = Resources.Loading        val call = service.getFollowing(username)        call.enqueue(object : Callback<List<ItemsItem>> {            override fun onResponse(                call: Call<List<ItemsItem>>,                response: Response<List<ItemsItem>>            ) {                if (response.isSuccessful) {                    response.body().let {                        follow.value = Resources.Success(it)                    }                } else {                    Log.w(DETAIL, "Gagal mengambil data")                }            }            override fun onFailure(call: Call<List<ItemsItem>>, t: Throwable) {                Log.e(DETAIL, "Somthing went wrong")            }        })        return follow    }}