package com.uknown.firstsubmission.ui.viewmodelimport android.app.Applicationimport android.util.Logimport android.widget.Toastimport androidx.lifecycle.AndroidViewModelimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport com.uknown.firstsubmission.network.response.ItemsItemimport com.uknown.firstsubmission.network.response.UserDetailResponseimport com.uknown.firstsubmission.network.retorfit.ApiConfigurationimport retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseclass DetailViewModel(@get:JvmName("getMainViewModel") val application: Application) :    AndroidViewModel(application) {    companion object {        private const val DETAIL = "Detail View Model"    }    private var _isLoading = MutableLiveData<Boolean>()    val isLoading: LiveData<Boolean> = _isLoading    private var _userDetail = MutableLiveData<UserDetailResponse>()    val userDetail: LiveData<UserDetailResponse> = _userDetail    private var _listFollow = MutableLiveData<List<ItemsItem>>()    val listFollow: LiveData<List<ItemsItem>> = _listFollow    private var _listFollows = MutableLiveData<List<ItemsItem>>()    val listFollows: LiveData<List<ItemsItem>> = _listFollows    fun getDetailUser(username: String) {        _isLoading.value = true        val call = ApiConfiguration.getApiService().getDetailUser(username)        call.enqueue(object : Callback<UserDetailResponse> {            override fun onResponse(                call: Call<UserDetailResponse>,                response: Response<UserDetailResponse>            ) {                if (response.isSuccessful) {                    _isLoading.value = false                    response.body().let {                        _userDetail.value = it                        println(response.errorBody().toString())                    }                } else {                    Toast.makeText(                        application.applicationContext,                        response.message(),                        Toast.LENGTH_SHORT                    ).show()                    Log.w(DETAIL, response.errorBody().toString())                }            }            override fun onFailure(call: Call<UserDetailResponse>, t: Throwable) {                _isLoading.value = false                Toast.makeText(                    application.applicationContext,                    t.message.toString(),                    Toast.LENGTH_SHORT                ).show()                Log.e(DETAIL, t.message.toString())                t.stackTrace            }        })    }    fun getFollowers(username: String) {        _isLoading.value = true        val call = ApiConfiguration.getApiService().getFollowers(username)        call.enqueue(object : Callback<List<ItemsItem>> {            override fun onResponse(                call: Call<List<ItemsItem>>,                response: Response<List<ItemsItem>>            ) {                if (response.isSuccessful) {                    _isLoading.value = false                    response.body().let {                        _listFollows.value = it                    }                } else {                    Toast.makeText(                        application.applicationContext,                        response.message(),                        Toast.LENGTH_SHORT                    ).show()                    Log.w("Detail View Model", response.errorBody().toString())                }            }            override fun onFailure(call: Call<List<ItemsItem>>, t: Throwable) {                _isLoading.value = false                Toast.makeText(                    application.applicationContext,                    t.message.toString(),                    Toast.LENGTH_SHORT                ).show()                Log.e(DETAIL, t.message.toString())                t.stackTrace            }        })    }    fun getFollowing(username: String) {        _isLoading.value = true        val call = ApiConfiguration.getApiService().getFollowing(username)        call.enqueue(object : Callback<List<ItemsItem>> {            override fun onResponse(                call: Call<List<ItemsItem>>,                response: Response<List<ItemsItem>>            ) {                if (response.isSuccessful) {                    _isLoading.value = false                    response.body().let {                        _listFollow.value = it                    }                } else {                    Toast.makeText(                        application.applicationContext,                        response.message(),                        Toast.LENGTH_SHORT                    ).show()                    Log.w("Detail View Model", response.message())                }            }            override fun onFailure(call: Call<List<ItemsItem>>, t: Throwable) {                _isLoading.value = false                Toast.makeText(                    application.applicationContext,                    t.message.toString(),                    Toast.LENGTH_SHORT                ).show()                Log.e(DETAIL, t.message.toString())                t.stackTrace            }        })    }}